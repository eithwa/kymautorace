#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np
import math
import tf
import os 
import cv2
from enum import Enum
from std_msgs.msg import UInt8, Float64, String
from sensor_msgs.msg import LaserScan, Image, CompressedImage
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from cv_bridge import CvBridge, CvBridgeError
from turtlebot3_autorace_msgs.msg import MovingParam

class DetectParking():
    def __init__(self):
        self.sub_image_type = "raw"         # "compressed" / "raw"
        self.pub_image_type = "raw"         # "compressed" / "raw"

        self.sub_parking_lot_order = rospy.Subscriber('/detect/parking_lot_order', UInt8, self.cbParkingLotOrder, queue_size=1)
        self.sub_scan_obstacle = rospy.Subscriber('/detect/scan', LaserScan, self.cbScanObstacle, queue_size=1)
        self.sub_parking_finished = rospy.Subscriber('/control/parking_finished', UInt8, self.cbParkingFinished, queue_size = 1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)

        if self.sub_image_type == "compressed":
            # subscribes compressed image
            self.sub_image_original = rospy.Subscriber('/detect/image_input_p/compressed', CompressedImage, self.cbGetImage, queue_size = 1)
        elif self.sub_image_type == "raw":
            # subscribes raw image
            self.sub_image_original = rospy.Subscriber('/detect/image_input_p', Image, self.cbGetImage, queue_size = 1)

        if self.pub_image_type == "compressed":
            # publishes parking image in compressed type 
            self.pub_image_parking = rospy.Publisher('/detect/image_output_p/compressed', CompressedImage, queue_size = 1)
        elif self.pub_image_type == "raw":
            # publishes parking image in raw type
            self.pub_image_parking = rospy.Publisher('/detect/image_output_p', Image, queue_size = 1)
        
        self.pub_parking_lot_return = rospy.Publisher('/detect/parking_lot_stamped', UInt8, queue_size=1)
        self.pub_parking_start = rospy.Publisher('/control/parking_start', UInt8, queue_size = 1)
        self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)

        self.StepOfParkingLot = Enum('StepOfParkingLot', 'searching_parking_sign searching_parking_point_line searching_nonreserved_parking_area parking')

        self.start_obstacle_detection = False

        self.is_obstacle_detected_R = False
        self.is_obstacle_detected_L = False

        self.cvBridge = CvBridge()
        self.cv_image_p = None

        self.is_parking_allowed = False
        self.is_now_parking = False
        self.is_parking_finished = False
        self.is_moving_complete = False

        self.blink_trigger = 1
        self.blink_count = 0

        dir_path = os.path.dirname(os.path.realpath(__file__))
        dir_path = dir_path.replace('turtlebot3_autorace_detect/src', 'turtlebot3_autorace_detect/')
        dir_path += 'file/detect_parking/'
        self.img1 = cv2.imread(dir_path + 'parking_not_allowed.png', -1)
        self.img2 = cv2.imread(dir_path + 'parking_allowed.png', -1)

        #==========
        self.hue_white_l = rospy.get_param("detect/lane/white/hue_l", 0)
        self.hue_white_h = rospy.get_param("detect/lane/white/hue_h", 163)
        self.saturation_white_l = rospy.get_param("detect/lane/white/saturation_l", 6)
        self.saturation_white_h = rospy.get_param("detect/lane/white/saturation_h", 90)
        self.lightness_white_l = rospy.get_param("detect/lane/white/lightness_l", 191)
        self.lightness_white_h = rospy.get_param("detect/lane/white/lightness_h", 255)

        self.hue_yellow_l = rospy.get_param("detect/lane/yellow/hue_l", 0)
        self.hue_yellow_h = rospy.get_param("detect/lane/yellow/hue_h", 179)
        self.saturation_yellow_l = rospy.get_param("detect/lane/yellow/saturation_l", 145)
        self.saturation_yellow_h = rospy.get_param("detect/lane/yellow/saturation_h", 255)
        self.lightness_yellow_l = rospy.get_param("detect/lane/yellow/lightness_l", 81)
        self.lightness_yellow_h = rospy.get_param("detect/lane/yellow/lightness_h", 255)
       
        self.turn_into_parking_log=False
        #==========

    def maskYellowLane(self, image):
        # Convert BGR to HSV
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        Hue_l = self.hue_yellow_l
        Hue_h = self.hue_yellow_h
        Saturation_l = self.saturation_yellow_l
        Saturation_h = self.saturation_yellow_h
        Lightness_l = self.lightness_yellow_l
        Lightness_h = self.lightness_yellow_h

        # define range of yellow color in HSV
        lower_yellow = np.array([Hue_l, Saturation_l, Lightness_l])
        upper_yellow = np.array([Hue_h, Saturation_h, Lightness_h])

        # Threshold the HSV image to get only yellow colors
        mask = cv2.inRange(hsv, lower_yellow, upper_yellow)

        # Bitwise-AND mask and original image
        # res = cv2.bitwise_and(image, image, mask = mask)

        # return res
        return mask

    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def cbGetImage(self, image_msg):
        if image_msg is not None:
            if self.sub_image_type == "compressed":
                np_arr = np.fromstring(image_msg.data, np.uint8)
                self.cv_image_p = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
            else:
                self.cv_image_p = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")
                mask=self.maskYellowLane(self.cv_image_p)
                rows = mask.shape[0]#480
                cols = mask.shape[1]#640
                # image_out = self.cv_image_monitor.copy()
                # print("cols", cols)
                for x in range(cols/2):
                    y=400
                    if(x>=cols or x<0):
                        continue
                    if(y>=rows or y<0):
                        continue
                    mask_value = mask[y,x]
                    if(mask_value==255):
                        break
                    if(x==(cols/2)-1):
                        # print("fuck")
                        self.turn_into_parking_log=True

                # img=mask.copy()
                # gray = cv2.cvtColor(self.cv_image_p,cv2.COLOR_BGR2GRAY)
                # edges = cv2.Canny(gray,50,150,apertureSize = 3)
                # lines = cv2.HoughLinesP(edges,1,np.pi/180,100,minLineLength=100,maxLineGap=10)
                # for line in lines:
                #     x1,y1,x2,y2 = line[0]
                #     angle = math.degrees(math.atan2(y2-y1,x2-x1))
                #     angle_range = 30
                #     # print(angle)
                #     if((angle>(180-angle_range) and angle<(180+angle_range)) or (angle>(0+20) and angle<(0+angle_range))):
                #         if(y1>230 and y2>230 and math.sqrt(math.pow((x1-x2),2)+math.pow((y1-y2),2))>130):
                #             cv2.line(img,(x1,y1),(x2,y2),(0,255,0),2)
                #             # print(angle)
                #             # print(math.sqrt(math.pow((x1-x2),2)+math.pow((y1-y2),2)))
                #             self.turn_into_parking_log=True

                # cv2.imshow('Result', img)
                # cv2.waitKey(10)

            self.fnBlinkParkSign()

            if self.pub_image_type == "compressed":
                # publishes parking image in compressed type
                self.pub_image_parking.publish(self.cvBridge.cv2_to_compressed_imgmsg(self.cv_image_p, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes parking image in raw type
                self.pub_image_parking.publish(self.cvBridge.cv2_to_imgmsg(self.cv_image_p, "bgr8"))
        else:
            pass

    def cbParkingLotOrder(self, order):
        msg_pub_parking_lot_return = UInt8()

        if order.data == self.StepOfParkingLot.searching_parking_sign.value:
            rospy.loginfo("Now lane_following")
            #=======找停車場入口
            while True:
                # i=0
                if(self.turn_into_parking_log==True):
                    break
            # rospy.sleep(2)
            #=======
            # msg_pub_parking_lot_return.data = self.StepOfParkingLot.searching_parking_sign.value
            msg_pub_parking_lot_return.data = self.StepOfParkingLot.searching_parking_point_line.value

        elif order.data == self.StepOfParkingLot.searching_parking_point_line.value:
            
            rospy.loginfo("Now motion")
            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.00
            self.pub_max_vel.publish(msg_pub_max_vel)

            # rospy.sleep(1)

            rospy.loginfo("doing motion_str")
            msg_moving = MovingParam()
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.15
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_lf")
            msg_moving = MovingParam()
            msg_moving.moving_type=2
            msg_moving.moving_value_angular=80
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(0.5)
            ########################################################################
            rospy.loginfo("doing motion_str2")
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=1.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(0.5)
        #####################################################################3

            self.start_obstacle_detection = True

            while True:
                # print("scan")
                if self.is_obstacle_detected_L == True or self.is_obstacle_detected_R == True:
                    break
            
            if self.is_obstacle_detected_R == False:
                rospy.loginfo("right parking lot is clear")
                msg_moving = MovingParam()
                msg_moving.moving_type=3
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)

                rospy.loginfo("doing motion_str")
                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.25
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)
                
                rospy.loginfo("doing motion_str")
                msg_moving.moving_type= 5
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.25
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)

                rospy.loginfo("doing motion_ri")
                msg_moving.moving_type= 3
                msg_moving.moving_value_angular=93
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)

                rospy.loginfo("doing motion_str")
            
                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=1.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)

                # rospy.loginfo("left parking lot is clear")
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)   
     
            
            elif self.is_obstacle_detected_L == False:
                rospy.loginfo("left parking lot is clear")
                msg_moving = MovingParam()
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=85
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(1)

                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.25
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)
                
                msg_moving.moving_type= 5
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=0.25
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)

                msg_moving.moving_type= 2
                msg_moving.moving_value_angular=95
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(0.5)
            

                rospy.loginfo("doing motion_str")
            
                msg_moving.moving_type= 4
                msg_moving.moving_value_angular=0.0
                msg_moving.moving_value_linear=1.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(2)

                rospy.loginfo("left parking lot Finish")
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(1)       

            rospy.loginfo("parking finished")
            msg_pub_parking_lot_return.data = self.StepOfParkingLot.parking.value

        elif order.data == self.StepOfParkingLot.searching_nonreserved_parking_area.value:
            rospy.loginfo("Now searching_nonreserved_parking_area")

            self.is_now_parking = True

            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.10
            self.pub_max_vel.publish(msg_pub_max_vel)

            while True:
                if self.is_obstacle_detected == False:
                    self.is_parking_allowed = True
                    rospy.loginfo("parking lot is clear")
                    break
                else:
                    self.is_parking_allowed = False
                    rospy.loginfo("right side is full")

            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.0
            self.pub_max_vel.publish(msg_pub_max_vel)


            msg_pub_parking_lot_return.data = self.StepOfParkingLot.searching_nonreserved_parking_area.value


        elif order.data == self.StepOfParkingLot.parking.value:
            rospy.loginfo("Now parking")

            msg_parking_start = UInt8()
            msg_parking_start.data = 1
            self.pub_parking_start.publish(msg_parking_start)

            # waiting for finishing parking
            while 1:
                if self.is_parking_finished == True:
                    break

            self.is_now_parking = False

            msg_pub_parking_lot_return.data = self.StepOfParkingLot.parking.value

        self.pub_parking_lot_return.publish(msg_pub_parking_lot_return)

    def cbParkingFinished(self, parking_finished_msg):
        self.is_parking_finished = True

    def cbScanObstacle(self, scan):
        angle_scan = 30

        scan_start_left = 90 - angle_scan
        scan_end_left = 90 + angle_scan

        scan_start_right = 270 - angle_scan
        scan_end_right = 270 + angle_scan

        threshold_distance = 0.5

        if self.start_obstacle_detection == True:
            for i in range(scan_start_left, scan_end_left):
                if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.01:
                    self.is_obstacle_detected_L = True
                    rospy.loginfo("left detected")
            

            for i in range(scan_start_right, scan_end_right):
                if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.01:
                    self.is_obstacle_detected_R = True
                    rospy.loginfo("right detected")
            self.start_obstacle_detection = False

    def fnFindDotLine(self):
        self.cv_bitn_img = cv2.bitwise_not(self.cv_image_p)
        params = cv2.SimpleBlobDetector_Params()
        # Change thresholds
        params.minThreshold = 0
        params.maxThreshold = 254

        # Filter by Area.
        params.filterByArea = True
        params.minArea = 5000
        params.maxArea = 6000

        # Filter by Circularity
        params.filterByCircularity = True
        params.minCircularity = 0.5

        # Filter by Convexity
        params.filterByConvexity = True
        params.minConvexity = 0.8

        det = cv2.SimpleBlobDetector_create(params)
        keypts = det.detect(self.cv_bitn_img)
        # frame = cv2.drawKeypoints(self.cv_bitn_img, keypts, np.array([]), (0, 0, 255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

        count = 0
        for i in range(len(keypts)):
            x = int(keypts[i].pt[0])
            y = int(keypts[i].pt[1])

            if x > 500:
                count += 1

        if count >= 1:
            return True
        else:
            return False

    def fnBlinkParkSign(self):
        if self.is_now_parking == True:
            self.blink_count += 1
            if self.blink_count % 8 == 0:
                self.blink_trigger = 1 - self.blink_trigger
                self.blink_count = 0

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_parking')
    node = DetectParking()
    node.main()
